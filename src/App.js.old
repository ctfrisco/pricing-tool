import React, { useState, useEffect } from 'react';

function App() {
  // Input state
  const [devices, setDevices] = useState({
    workstations: 1000,
    physicalServers: 100,
    virtualServers: 50,
    networkDevices: 50
  });
  
  const [serviceLevel, setServiceLevel] = useState('fullyManaged');
  const [contractTerm, setContractTerm] = useState('1year');
  const [paymentFrequency, setPaymentFrequency] = useState('monthly');
  
  // Changed from object of booleans to single string value
  const [selectedBundle, setSelectedBundle] = useState('none');
  
  // Industry comparison state
  const [showComparison, setShowComparison] = useState(false);
  const [comparisonInputs, setComparisonInputs] = useState({
    itStaffCount: 5,
    averageSalary: 85000,
    benefits: 30,
    overhead: 20,
    competitorPrice: 85
  });
  
  // Calculate total devices
  const totalDevices = 
    parseInt(devices.workstations || 0) + 
    parseInt(devices.physicalServers || 0) + 
    parseInt(devices.virtualServers || 0) + 
    parseInt(devices.networkDevices || 0);
  
  // Determine tier
  let tier, efficiencyFactor, profitMargin;
  if (totalDevices <= 200) {
    tier = "Tier 1";
    efficiencyFactor = 1.0;
    profitMargin = 0.65;
  } else if (totalDevices <= 1000) {
    tier = "Tier 2";
    efficiencyFactor = 0.80;
    profitMargin = 0.50;
  } else if (totalDevices <= 5000) {
    tier = "Tier 3";
    efficiencyFactor = 0.60;
    profitMargin = 0.42;
  } else if (totalDevices <= 10000) {
    tier = "Tier 4";
    efficiencyFactor = 0.50;
    profitMargin = 0.37;
  } else if (totalDevices <= 20000) {
    tier = "Tier 5";
    efficiencyFactor = 0.45;
    profitMargin = 0.32;
  } else if (totalDevices <= 50000) {
    tier = "Tier 6";
    efficiencyFactor = 0.35;
    profitMargin = 0.27;
  } else {
    tier = "Tier 7";
    efficiencyFactor = 0.25;
    profitMargin = 0.22;
  }
  
  // Service level multiplier
  let serviceLevelMultiplier;
  switch(serviceLevel) {
    case 'monitorOnly':
      serviceLevelMultiplier = 0.8;
      break;
    case 'monitorBasic':
      serviceLevelMultiplier = 0.9;
      break;
    case 'monitorRemediation':
      serviceLevelMultiplier = 1.0;
      break;
    case 'advancedManagement':
      serviceLevelMultiplier = 1.15;
      break;
    case 'fullyManaged':
      serviceLevelMultiplier = 1.3;
      break;
    default:
      serviceLevelMultiplier = 1.0;
  }
  
  // Contract term discount
  let contractDiscount;
  switch(contractTerm) {
    case '1year':
      contractDiscount = 0;
      break;
    case '2year':
      contractDiscount = 0.08;
      break;
    case '3year':
      contractDiscount = 0.15;
      break;
    default:
      contractDiscount = 0;
  }
  
  // Payment frequency discount
  let paymentDiscount = 0;
  if (paymentFrequency === 'annual') {
    if (totalDevices <= 5000) {
      paymentDiscount = 0.05;
    } else if (totalDevices <= 20000) {
      paymentDiscount = 0.08;
    } else {
      paymentDiscount = 0.12;
    }
  }
  
  // Bundle discount - Updated for dropdown selection
  let bundleDiscount = 0;
  let appliedBundle = "";
  
  switch(selectedBundle) {
    case 'enterpriseComplete':
      bundleDiscount = 0.20;
      appliedBundle = "Enterprise Complete Bundle";
      break;
    case 'enterpriseSecurity':
      bundleDiscount = 0.17;
      appliedBundle = "Enterprise Security Bundle";
      break;
    case 'enterpriseBackup':
      bundleDiscount = 0.15;
      appliedBundle = "Enterprise Backup Bundle";
      break;
    default:
      bundleDiscount = 0;
      appliedBundle = "";
  }
  
  // Calculate labor hours
  let workstationHourRate, serverHourRate, networkHourRate;
  
  // Adjust hour rates based on tier
  if (tier === "Tier 5" || tier === "Tier 6") {
    workstationHourRate = 0.030;
    serverHourRate = 0.95;
    networkHourRate = 0.07;
  } else if (tier === "Tier 7") {
    workstationHourRate = 0.025;
    serverHourRate = 0.80;
    networkHourRate = 0.06;
  } else {
    workstationHourRate = 0.04;
    serverHourRate = 1.25;
    networkHourRate = 0.1;
  }
  
  const workstationHours = devices.workstations * workstationHourRate;
  const serverHours = (parseInt(devices.physicalServers || 0) + parseInt(devices.virtualServers || 0)) * serverHourRate;
  const networkHours = devices.networkDevices * networkHourRate;
  
  const totalBaseHours = workstationHours + serverHours + networkHours;
  const adjustedHours = totalBaseHours * efficiencyFactor;
  const totalServiceHours = adjustedHours * serviceLevelMultiplier;
  
  // Calculate labor costs with appropriate staff mix
  let offshorePercentage, usBasedPercentage, architectPercentage;
  
  if (tier === "Tier 4" || tier === "Tier 5") {
    offshorePercentage = 0.80;
    usBasedPercentage = 0.15;
    architectPercentage = 0.05;
  } else if (tier === "Tier 6" || tier === "Tier 7") {
    offshorePercentage = 0.85;
    usBasedPercentage = 0.10;
    architectPercentage = 0.05;
  } else {
    offshorePercentage = 0.7;
    usBasedPercentage = 0.2;
    architectPercentage = 0.1;
  }
  
  const offshoreHours = totalServiceHours * offshorePercentage;
  const usBasedHours = totalServiceHours * usBasedPercentage;
  const architectHours = totalServiceHours * architectPercentage;
  
  const laborCost = (offshoreHours * 45) + (usBasedHours * 75) + (architectHours * 137);
  
  // Calculate tooling costs with volume discounts
  let rmmRate, socRate;
  
  if (tier === "Tier 1" || tier === "Tier 2") {
    rmmRate = 0.5;
    socRate = 9;
  } else if (tier === "Tier 3") {
    rmmRate = 0.50;
    socRate = 7.5;
  } else if (tier === "Tier 4") {
    rmmRate = 0.50;
    socRate = 7.2;
  } else if (tier === "Tier 5") {
    rmmRate = 0.50;
    socRate = 7;
  } else {
    rmmRate = 0.50;
    socRate = 6;
  }
  
  const rmmCost = totalDevices * rmmRate;
  const socCost = totalDevices * socRate;
  
  const baseToolingCost = rmmCost + socCost;
  const discountedToolingCost = baseToolingCost * (1 - bundleDiscount);
  
  // Total costs
  const baseCost = laborCost + discountedToolingCost;
  const withProfitMargin = baseCost / (1 - profitMargin);
  const withContractDiscount = withProfitMargin * (1 - contractDiscount);
  const finalMonthlyCost = withContractDiscount * (1 - paymentDiscount);
  const annualCost = finalMonthlyCost * 12;
  const perDeviceCost = finalMonthlyCost / totalDevices;
  
  
  

  // Handle comparison input changes
  const handleComparisonChange = (e) => {
    const { name, value } = e.target;
    setComparisonInputs({
      ...comparisonInputs,
      [name]: parseFloat(value)
    });
  };

  // Calculate in-house IT costs
  const calculateInHouseCosts = () => {
    const { itStaffCount, averageSalary, benefits, overhead } = comparisonInputs;
    
    // Total annual salary cost
    const annualSalaryCost = itStaffCount * averageSalary;
    
    // Benefits cost (healthcare, retirement, etc.)
    const benefitsCost = annualSalaryCost * (benefits / 100);
    
    // Overhead cost (office space, equipment, etc.)
    const overheadCost = annualSalaryCost * (overhead / 100);
    
    // Total annual cost
    const totalAnnualCost = annualSalaryCost + benefitsCost + overheadCost;
    
    // Monthly cost
    const monthlyCost = totalAnnualCost / 12;
    
    // Cost per device
    const costPerDevice = totalDevices ? totalAnnualCost / 12 / totalDevices : 0;
    
    return {
      annualCost: totalAnnualCost,
      monthlyCost,
      costPerDevice
    };
  };

  // Calculate competitor MSP costs
  const calculateCompetitorCosts = () => {
    const { competitorPrice } = comparisonInputs;
    
    const monthlyCost = competitorPrice * totalDevices;
    const annualCost = monthlyCost * 12;
    
    return {
      annualCost,
      monthlyCost,
      costPerDevice: competitorPrice
    };
  };

  // Calculate savings
  const calculateComparativeSavings = () => {
    const inHouseCosts = calculateInHouseCosts();
    const competitorCosts = calculateCompetitorCosts();
    
    const inHouseSavings = {
      monthly: inHouseCosts.monthlyCost - finalMonthlyCost,
      annual: inHouseCosts.annualCost - annualCost,
      percentage: inHouseCosts.monthlyCost ? ((inHouseCosts.monthlyCost - finalMonthlyCost) / inHouseCosts.monthlyCost) * 100 : 0
    };
    
    const competitorSavings = {
      monthly: competitorCosts.monthlyCost - finalMonthlyCost,
      annual: competitorCosts.annualCost - annualCost,
      percentage: competitorCosts.monthlyCost ? ((competitorCosts.monthlyCost - finalMonthlyCost) / competitorCosts.monthlyCost) * 100 : 0
    };
    
    return {
      inHouse: inHouseSavings,
      competitor: competitorSavings
    };
  };

  // Access the comparison data
  const comparisonData = {
    inHouse: calculateInHouseCosts(),
    competitor: calculateCompetitorCosts(),
    savings: calculateComparativeSavings()
  };
  
  // Auto-adjust staff count based on environment size
  useEffect(() => {
    let staffCount = 2; // default
    
    if (totalDevices > 500 && totalDevices <= 2000) {
      staffCount = 5;
    } else if (totalDevices > 2000 && totalDevices <= 5000) {
      staffCount = 12;
    } else if (totalDevices > 5000 && totalDevices <= 10000) {
      staffCount = 25;
    } else if (totalDevices > 10000) {
      staffCount = Math.ceil(totalDevices / 350); // Approximate 1:350 ratio
    }
    
    setComparisonInputs(prev => ({
      ...prev,
      itStaffCount: staffCount
    }));
  }, [totalDevices]);
  
  // Handle input changes
  const handleDeviceChange = (e) => {
    const { name, value } = e.target;
    setDevices({
      ...devices,
      [name]: value
    });
  };
  
  // Format currency
  const formatCurrency = (amount) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 2
    }).format(amount);
  };
  
  // Render the comparison section
  const renderComparisonSection = () => (
    <div className="card mt-6">
      <div className="card-header">
        <h2 className="flex justify-between">
          <span>Industry Comparison</span>
          <button 
            onClick={() => setShowComparison(!showComparison)} 
            className="text-sm bg-blue-50 px-2 py-1 rounded border border-blue-200"
          >
            {showComparison ? 'Hide Details' : 'Show Details'}
          </button>
        </h2>
      </div>
      
      <div className="card-body">
        {showComparison && (
          <div className="mb-4 p-3 bg-gray-50 rounded">
            <h3 className="mb-3">Comparison Settings</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="input-group">
                <label htmlFor="itStaffCount">Number of IT Staff (In-House)</label>
                <input
                  type="number"
                  id="itStaffCount"
                  name="itStaffCount"
                  value={comparisonInputs.itStaffCount}
                  onChange={handleComparisonChange}
                  min="1"
                />
              </div>
              
              <div className="input-group">
                <label htmlFor="averageSalary">Average IT Salary ($)</label>
                <input
                  type="number"
                  id="averageSalary"
                  name="averageSalary"
                  value={comparisonInputs.averageSalary}
                  onChange={handleComparisonChange}
                  min="0"
                />
              </div>
              
              <div className="input-group">
                <label htmlFor="benefits">Benefits (% of Salary)</label>
                <input
                  type="number"
                  id="benefits"
                  name="benefits"
                  value={comparisonInputs.benefits}
                  onChange={handleComparisonChange}
                  min="0"
                  max="100"
                />
              </div>
              
              <div className="input-group">
                <label htmlFor="overhead">Overhead (% of Salary)</label>
                <input
                  type="number"
                  id="overhead"
                  name="overhead"
                  value={comparisonInputs.overhead}
                  onChange={handleComparisonChange}
                  min="0"
                  max="100"
                />
              </div>
              
              <div className="input-group">
                <label htmlFor="competitorPrice">Avg. Competitor Price ($ per device)</label>
                <input
                  type="number"
                  id="competitorPrice"
                  name="competitorPrice"
                  value={comparisonInputs.competitorPrice}
                  onChange={handleComparisonChange}
                  min="0"
                />
              </div>
            </div>
          </div>
        )}
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-blue-50 p-4 rounded">
            <h3 className="font-semibold mb-2">Our Pricing Proposal</h3>
            <div className="text-sm space-y-1">
              <div className="flex justify-between">
                <span>Monthly Cost:</span>
                <span className="font-medium">{formatCurrency(finalMonthlyCost)}</span>
              </div>
              <div className="flex justify-between">
                <span>Annual Cost:</span>
                <span className="font-medium">{formatCurrency(annualCost)}</span>
              </div>
              <div className="flex justify-between">
                <span>Cost Per Device:</span>
                <span className="font-medium">{formatCurrency(perDeviceCost)}</span>
              </div>
            </div>
          </div>
          
          <div className="bg-gray-50 p-4 rounded">
            <h3 className="font-semibold mb-2">In-House IT Department</h3>
            <div className="text-sm space-y-1">
              <div className="flex justify-between">
                <span>Monthly Cost:</span>
                <span className="font-medium">{formatCurrency(comparisonData.inHouse.monthlyCost)}</span>
              </div>
              <div className="flex justify-between">
                <span>Annual Cost:</span>
                <span className="font-medium">{formatCurrency(comparisonData.inHouse.annualCost)}</span>
              </div>
              <div className="flex justify-between">
                <span>Cost Per Device:</span>
                <span className="font-medium">{formatCurrency(comparisonData.inHouse.costPerDevice)}</span>
              </div>
            </div>
          </div>


          <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="bg-green-50 p-4 rounded border border-green-100">
            <h3 className="font-semibold text-green-700 mb-2">Savings vs. In-House IT</h3>
            <div className="text-sm space-y-1">
              <div className="flex justify-between">
                <span>Monthly Savings:</span>
                <span className="font-medium">{formatCurrency(comparisonData.savings.inHouse.monthly)}</span>
              </div>
              <div className="flex justify-between">
                <span>Annual Savings:</span>
                <span className="font-medium">{formatCurrency(comparisonData.savings.inHouse.annual)}</span>
              </div>
              <div className="flex justify-between font-semibold text-green-700">
                <span>Percentage Savings:</span>
                <span>{comparisonData.savings.inHouse.percentage.toFixed(1)}%</span>
              </div>
            </div>
          </div>

          <div className="bg-gray-50 p-4 rounded">
            <h3 className="font-semibold mb-2">Average Competitor MSP</h3>
            <div className="text-sm space-y-1">
              <div className="flex justify-between">
                <span>Monthly Cost:</span>
                <span className="font-medium">{formatCurrency(comparisonData.competitor.monthlyCost)}</span>
              </div>
              <div className="flex justify-between">
                <span>Annual Cost:</span>
                <span className="font-medium">{formatCurrency(comparisonData.competitor.annualCost)}</span>
              </div>
              <div className="flex justify-between">
                <span>Cost Per Device:</span>
                <span className="font-medium">{formatCurrency(comparisonData.competitor.costPerDevice)}</span>
              </div>
            </div>
          </div>
        </div>
          
          <div className="bg-green-50 p-4 rounded border border-green-100">
            <h3 className="font-semibold text-green-700 mb-2">Savings vs. Competitor MSP</h3>
            <div className="text-sm space-y-1">
              <div className="flex justify-between">
                <span>Monthly Savings:</span>
                <span className="font-medium">{formatCurrency(comparisonData.savings.competitor.monthly)}</span>
              </div>
              <div className="flex justify-between">
                <span>Annual Savings:</span>
                <span className="font-medium">{formatCurrency(comparisonData.savings.competitor.annual)}</span>
              </div>
              <div className="flex justify-between font-semibold text-green-700">
                <span>Percentage Savings:</span>
                <span>{comparisonData.savings.competitor.percentage.toFixed(1)}%</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
  
  return (
    <div className="container">
      <h1>MSP Pricing Calculator</h1>
      
      <div className="grid">
        {/* Inputs */}
        <div>
          <div className="card">
            <div className="card-header">
              <h2>Environment Details</h2>
            </div>
            <div className="card-body">
              <div className="space-y-4">
                <div className="input-group">
                  <label htmlFor="workstations">
                    Number of Workstations
                  </label>
                  <input
                    type="number"
                    id="workstations"
                    name="workstations"
                    value={devices.workstations}
                    onChange={handleDeviceChange}
                    min="0"
                  />
                </div>
                
                <div className="input-group">
                  <label htmlFor="physicalServers">
                    Number of Physical Servers
                  </label>
                  <input
                    type="number"
                    id="physicalServers"
                    name="physicalServers"
                    value={devices.physicalServers}
                    onChange={handleDeviceChange}
                    min="0"
                  />
                </div>
                
                <div className="input-group">
                  <label htmlFor="virtualServers">
                    Number of Virtual Servers
                  </label>
                  <input
                    type="number"
                    id="virtualServers"
                    name="virtualServers"
                    value={devices.virtualServers}
                    onChange={handleDeviceChange}
                    min="0"
                  />
                </div>
                
                <div className="input-group">
                  <label htmlFor="networkDevices">
                    Number of Network Devices
                  </label>
                  <input
                    type="number"
                    id="networkDevices"
                    name="networkDevices"
                    value={devices.networkDevices}
                    onChange={handleDeviceChange}
                    min="0"
                  />
                </div>
              </div>
            </div>
          </div>
          
          <div className="card">
            <div className="card-header">
              <h2>Service Options</h2>
            </div>
            <div className="card-body">
              <div className="space-y-4">
                <div className="input-group">
                  <label htmlFor="serviceLevel">
                    Service Level
                  </label>
                  <select
                    id="serviceLevel"
                    value={serviceLevel}
                    onChange={(e) => setServiceLevel(e.target.value)}
                  >
                    <option value="monitorOnly">Monitor Only (80%)</option>
                    <option value="monitorBasic">Monitor + Basic Remediation (90%)</option>
                    <option value="monitorRemediation">Monitor + Remediation (100%)</option>
                    <option value="advancedManagement">Advanced Management (115%)</option>
                    <option value="fullyManaged">Fully Managed Support (130%)</option>
                  </select>
                </div>
                
                <div className="input-group">
                  <label htmlFor="contractTerm">
                    Contract Term
                  </label>
                  <select
                    id="contractTerm"
                    value={contractTerm}
                    onChange={(e) => setContractTerm(e.target.value)}
                  >
                    <option value="1year">1 Year</option>
                    <option value="2year">2 Years (8% discount)</option>
                    <option value="3year">3 Years (15% discount)</option>
                  </select>
                </div>
                
                <div className="input-group">
                  <label htmlFor="paymentFrequency">
                    Payment Frequency
                  </label>
                  <select
                    id="paymentFrequency"
                    value={paymentFrequency}
                    onChange={(e) => setPaymentFrequency(e.target.value)}
                  >
                    <option value="monthly">Monthly</option>
                    <option value="annual">Annual (5-12% discount)</option>
                  </select>
                </div>
                
                {/* Changed from checkboxes to dropdown */}
                <div className="input-group">
                  <label htmlFor="bundleOption">Bundle Option</label>
                  <select
                    id="bundleOption"
                    value={selectedBundle}
                    onChange={(e) => setSelectedBundle(e.target.value)}
                  >
                    <option value="none">No Bundle</option>
                    <option value="enterpriseSecurity">Enterprise Security Bundle (17% discount) - RMM + Managed SOC</option>
                    <option value="enterpriseBackup">Enterprise Backup Bundle (15% discount) - RMM + Cove Data Protect</option>
                    <option value="enterpriseComplete">Enterprise Complete Bundle (20% discount) - RMM + SOC + Backup + DNS</option>
                  </select>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Results */}
        <div>
          <div className="card">
            <div className="card-header">
              <h2>Pricing Summary</h2>
            </div>
            <div className="card-body">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <h3>Environment Information</h3>
                  <ul className="space-y-1 text-sm">
                    <li className="flex justify-between">
                      <span>Total Devices:</span>
                      <span className="font-medium">{totalDevices.toLocaleString()}</span>
                    </li>
                    <li className="flex justify-between">
                      <span>Tier:</span>
                      <span className="font-medium">{tier}</span>
                    </li>
                    <li className="flex justify-between">
                      <span>Efficiency Factor:</span>
                      <span className="font-medium">{(efficiencyFactor * 100).toFixed(0)}%</span>
                    </li>
                    <li className="flex justify-between">
                      <span>Profit Margin:</span>
                      <span className="font-medium">{(profitMargin * 100).toFixed(0)}%</span>
                    </li>
                  </ul>
                </div>
                
                <div>
                  <h3>Pricing Information</h3>
                  <ul className="space-y-1 text-sm">
                    <li className="flex justify-between">
                      <span>Monthly Price:</span>
                      <span className="font-medium">{formatCurrency(finalMonthlyCost)}</span>
                    </li>
                    <li className="flex justify-between">
                      <span>Annual Price:</span>
                      <span className="font-medium">{formatCurrency(annualCost)}</span>
                    </li>
                    <li className="flex justify-between">
                      <span>Price Per Device:</span>
                      <span className="font-medium">{formatCurrency(perDeviceCost)}</span>
                    </li>
                  </ul>
                </div>
              </div>
              
              <div className="mt-6">
                <h3>Cost Breakdown</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="bg-gray-50 p-3 rounded">
                    <h4>Labor Cost</h4>
                    <div className="text-sm">
                      <div className="flex justify-between">
                        <span>Total Service Hours:</span>
                        <span>{totalServiceHours.toFixed(1)} hours/month</span>
                      </div>
                      <div className="flex justify-between">
                        <span>Labor Cost:</span>
                        <span>{formatCurrency(laborCost)}/month</span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="bg-gray-50 p-3 rounded">
                    <h4>Tooling Cost</h4>
                    <div className="text-sm">
                      <div className="flex justify-between">
                        <span>Base Tooling Cost:</span>
                        <span>{formatCurrency(baseToolingCost)}/month</span>
                      </div>
                      {bundleDiscount > 0 && (
                        <div className="flex justify-between text-green-600">
                          <span>Bundle Applied:</span>
                          <span>{appliedBundle} ({(bundleDiscount * 100).toFixed(0)}% discount)</span>
                        </div>
                      )}
                      <div className="flex justify-between font-medium">
                        <span>Final Tooling Cost:</span>
                        <span>{formatCurrency(discountedToolingCost)}/month</span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-100">
             
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                     {/* Industry Comparison Section */}
                     {renderComparisonSection()}
             
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default App;